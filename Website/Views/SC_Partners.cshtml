@inherits Umbraco.Web.Mvc.UmbracoViewPage
@using StartupCentral.Extensions

@{
    var noNavFooter = Request.Params["noNavFooter"];
    Layout = (noNavFooter == null) ? "Master.cshtml" : "MasterNoNavFooter.cshtml";

    int mediaItemId = 0;
    IEnumerable<IMember> pList = ApplicationContext.Current.Services.MemberService.GetMembersByMemberType("partner");
    var currentUser = Members.GetCurrentMember();

    var driverParentNode = Umbraco.Content(26544);
    var partnerTags = driverParentNode.Descendants().OrderBy(n => n.Name);


    string shortText = string.Empty;
    string aboveTilbud = string.Empty;
    string weOffer = string.Empty;
}


<main id="sc-partners-page" class="sc-guest sc-bgb10">
    <div class="rail-grid rail-grid--2-column">
        <div class="md-rail">
            <div class="entity-search-box follow-scroll">
                <div class="entity-search">
                    <div class="form-container">
                        <label for="search">@Umbraco.GetDictionaryValue("Search", "Søg")</label>
                        <input class="searchbar" placeholder="@Umbraco.GetDictionaryValue("Search", "Søg") ..." type="text" id="myInput" autocomplete="off">
                    </div>
                    <span id="separator">
                        @Umbraco.GetDictionaryValue("or", "eller")
                    </span>
                    <div class="form-container">
                        <select name="kategori" id="kategori" class="valid">
                            <option class="category" value="All">@Umbraco.GetDictionaryValue("All", "Alle")</option>
                            @foreach (var tag in partnerTags)
                            {
                                var tagurl = tag.Value("tagurl");
                                <option class="category" value="@tagurl">@tag.Name</option>
                            }
                        </select>
                    </div>

                    <button class="button outlined-btn" onclick="clearFilter()">@Umbraco.GetDictionaryValue("ClearFilter", "Nulstil filter")</button>
                </div>
            </div>
        </div>
        <div class="lg-rail discover-entity-container">
            <h1>@Umbraco.AssignedContentItem.Value("title")</h1>
            <p>@Umbraco.AssignedContentItem.Value("subTitle")</p>
            <ul class="discover-entity-list" id="partner-list">
                @if (pList.Count() > 0)
                {
                    var partnersContent = Umbraco.Content(10842);
                    foreach (var partner in pList.Where(itm => itm.GetValue<bool>("wwunavailable") == false).OrderBy(itm => itm.Name).OrderBy(itm => itm.Name))
                    {
                        var pId = partner.Id;
                        IPublishedContent partnerDetail = partnersContent.Children(Culture).FirstOrDefault(x => x.Value<IPublishedContent>("partnerPicker") != null && x.Value<IPublishedContent>("partnerPicker").Id == partner.Id);
                        List<int> tagsId = partner.GetValue<string>("wwtags").UdiCSVToIntList();

                        var wwtags = new List<string>();

                        if (tagsId != null)
                        {
                            foreach (int tag in tagsId)
                            {
                                var x = Umbraco.Content(tag);
                                var url = x.Value<string>("tagurl");
                                wwtags.Add(url);
                            }
                        }

                        var resulttags = String.Join(", ", wwtags.ToArray());

                        try
                        {
                            if (partnerDetail != null)
                            {
                                shortText = partnerDetail.Value<string>("wwshorttext", Culture);
                                aboveTilbud = partnerDetail.Value<string>("wwaboveTilbud", Culture);
                                weOffer = partnerDetail.Value<string>("wwOffer", Culture);
                            }
                            else
                            {
                                shortText = string.Empty;
                                aboveTilbud = string.Empty;
                                weOffer = string.Empty;
                            }
                        }
                        catch
                        {
                            shortText = string.Empty;
                            aboveTilbud = string.Empty;
                            weOffer = string.Empty;
                        }
                        // logo
                        if (partner.GetValue<string>("wwpartnerAvatar").IsNumeric())
                        {
                            mediaItemId = Convert.ToInt32(partner.GetValue<string>("wwpartnerAvatar"));
                        }
                        else if (!string.IsNullOrEmpty(partner.GetValue<string>("wwpartnerAvatar")))
                        {
                            mediaItemId = partner.GetValue<string>("wwpartnerAvatar").GetIdByUdi();
                        }

                        var urlprofile = partner.GetValue<string>("urlProfile") + '/';

                        <li id="@partnersContent.Url@urlprofile" class="discover-entity-card discover-entity-card--partner partnercard filterDiv @resulttags">
                            <div class="discover-entity-type-card">
                                @{ 
                                    var partnerUrl = partnersContent.Url + urlprofile;
                                    if (noNavFooter != null)
                                    {
                                        partnerUrl += "?noNavFooter=1";
                                    }
                                }

                                <a href="@partnerUrl" class="discover-entity-type-card__info-container">
                                    @if (mediaItemId > 0)
                                    {
                                        var altText = partner.Name + " | Startup Central";
                                        <img loading="lazy" class="discover-entity-type-card__image-squared"
                                             src=@(Umbraco.Media(mediaItemId).Url() + "?width=300") alt="@altText">
                                    }

                                    <h3 class="discover-entity-type-card__name">@shortText</h3>

                                    <span class="discover-entity-type-card__description">
                                        @aboveTilbud
                                    </span>
                                                                    <div class="discover-entity-type-card__discount">
                                    <span>
                                        @weOffer
                                    </span>
                                </div>
                                </a>
                            </div>
                        </li>
                    }
                }

            </ul>
        </div>
    </div>
</main>

<script>
    //search
    var input = document.getElementById("myInput");
    input.addEventListener("input", filterInput);
    var x = "";

    function filterInput() {
        $('#kategori').val('All');
        
        var input, filter, cards, cardContainer, title, competences, i;

        input = document.getElementById("myInput");
        filter = input.value.toUpperCase();
        cardContainer = document.getElementById("partner-list");
        cards = cardContainer.getElementsByClassName("partnercard");

        for (i = 0; i < cards.length; i++) {
            title = cards[i].querySelector(".discover-entity-type-card__name");
            competences = cards[i].querySelector(".discover-entity-type-card__description");
            alt = cards[i].querySelector(".discover-entity-type-card__image-squared").alt;
            if (title.innerText.toUpperCase().indexOf(filter) > -1 || competences.innerText.toUpperCase().indexOf(filter) > -1  || alt.toUpperCase().indexOf(filter) > -1) {
                cards[i].style.display = "flex";
                cards[i].classList.add("show");
            } else {
                cards[i].style.display = "none";
                cards[i].classList.remove("show");
            }
        }
    }

    if ($(location).attr('hash')) {
        x = $(location).attr('hash');
        x = x.substring(1);
        filterSelection(x);
    }
    else {
        filterSelection("All");
    }
    //Scroll
@*
    var element = $('.follow-scroll');
    var originalY = element.offset().top;
    var topMargin = 70;

    element.css('position', 'relative');

    $(window).on('scroll', function (event) {
        var scrollTop = $(window).scrollTop();

        element.stop(false, false).animate({
            top: scrollTop < originalY
                ? 0
                : scrollTop - originalY + topMargin
        }, 100);
    });
*@
//Scroll End
  
    function clearFilter() {
        $('#myInput').val('');
        $('#kategori').val('All').trigger("change");
    }

    function filterSelection(c) {
        window.location.hash = c;
        var x, i;
        x = document.getElementsByClassName("filterDiv");
        if (c == "All") c = "";
        for (i = 0; i < x.length; i++) {
            w3RemoveClass(x[i], "show");
            if (x[i].className.indexOf(c) > -1) w3AddClass(x[i], "show");
        }
    }

    function w3AddClass(element, name) {
        var i, arr1, arr2;
        arr1 = element.className.split(" ");
        arr2 = name.split(" ");
        for (i = 0; i < arr2.length; i++) {
            if (arr1.indexOf(arr2[i]) == -1) { element.className += " " + arr2[i]; }
        }
    }

    function w3RemoveClass(element, name) {
        var i, arr1, arr2;
        arr1 = element.className.split(" ");
        arr2 = name.split(" ");
        for (i = 0; i < arr2.length; i++) {
            while (arr1.indexOf(arr2[i]) > -1) {
                arr1.splice(arr1.indexOf(arr2[i]), 1);
            }
        }
        element.className = arr1.join(" ");
    }

    $('#kategori').on('change', function () {
        $('#myInput').val('');
        filterSelection(this.value);
    });
</script>

<style>
    .filterDiv {
        display: none !important;
    }

    .show {
        display: flex !important;
    }
</style>